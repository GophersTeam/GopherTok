version: '3.5'
# 网络配置
networks:
  gophertok:
    external: true
# 服务容器配置
services:
  # Traefik网关
  traefik:
    image: traefik:v2.4
    command:
      - "--providers.docker=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.gophertok.address=:8000"  # 暴露端口
      - "--api=true"               # 启用Traefik的API
      - "--api.insecure=true"      # 启用Traefik的Web UI
      - "--providers.docker"
      - "--experimental.plugins.fail2ban.modulename=github.com/tomMoulard/fail2ban"
      - "--experimental.plugins.fail2ban.version=v0.6.6"
    ports:
      - "8070:8080"  # Traefik dashboard
      - "8000:8000"  # gophertok 服务端口
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - gophertok
  # user服务
  user-rpc: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}user-rpc:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
#    ports:
#      - "5002:5002"
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    deploy:
      replicas: 2 # 启动三个实例

  user-api: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}user-api:latest
    #    container_name: gophertok-user-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    #ports: # 设置端口映射
    #  - "5001:5001"  # user服务api端口
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gophertok-user-api.rule=Host(`${GOPHERTOKHOST}`) && PathPrefix(`/douyin/user`)" # 转发规则
      - "traefik.http.routers.gophertok-user-api.entrypoints=gophertok"
      - "traefik.http.services.gophertok-user-api.loadbalancer.server.port=5001"    # 实例的端口
      - "traefik.docker.network=gophertok"
      - "traefik.http.services.gophertok-user-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gophertok-user-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 2 # 启动三个实例

  user-mq: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}user-mq:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启

  # video服务
  video-rpc: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}video-rpc:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
#    ports:
#      - "5004:5004"
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    deploy:
      replicas: 2 # 启动三个实例

  video-api: # 自定义容器名称
    #image: video-api-0:latest
    image: ${DOCKERHUB_IMAGE}video-api:latest
    #    container_name: gophertok-user-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    volumes:
      - /home/project/gophertok/temp/:/home/project/gophertok/temp/
      - /home/project/gophertok/ffmpeg:/usr/bin/ffmpeg
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"        # ${GOPHERTOKHOST}
      - "traefik.http.routers.gophertok-video-api.rule=Host(`${GOPHERTOKHOST}`) && PathPrefix(`/douyin/publish`,`/douyin/feed`)" # 转发规则
      - "traefik.http.routers.gophertok-video-api.entrypoints=gophertok"
      - "traefik.http.services.gophertok-video-api.loadbalancer.server.port=5003"    # 实例的端口
      - "traefik.docker.network=gophertok"
      - "traefik.http.services.gophertok-video-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gophertok-video-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 2 # 启动三个实例

  video-mq: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}video-mq:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启


  # chat服务
  chat-rpc: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}chat-rpc:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    deploy:
      replicas: 2 # 启动三个实例

  chat-api: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}chat-api:latest
    #    container_name: gophertok-user-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gophertok-chat-api.rule=Host(`${GOPHERTOKHOST}`) && PathPrefix(`/douyin/message`)" # 转发规则
      - "traefik.http.routers.gophertok-chat-api.entrypoints=gophertok"
      - "traefik.http.services.gophertok-chat-api.loadbalancer.server.port=20002"    # 实例的端口
      - "traefik.docker.network=gophertok"
      - "traefik.http.services.gophertok-chat-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gophertok-chat-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 2 # 启动三个实例

  chat-mq: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}chat-mq:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启

  # comment服务
  comment-rpc: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}comment-rpc:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
#    ports:
#      - "2003:20003"
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    deploy:
      replicas: 2 # 启动三个实例

  comment-api: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}comment-api:latest
    #    container_name: gophertok-user-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true

    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gophertok-comment-api.rule=Host(`${GOPHERTOKHOST}`) && PathPrefix(`/douyin/comment`)" # 转发规则
      - "traefik.http.routers.gophertok-comment-api.entrypoints=gophertok"
      - "traefik.http.services.gophertok-comment-api.loadbalancer.server.port=20001"    # 实例的端口
      - "traefik.docker.network=gophertok"
      - "traefik.http.services.gophertok-comment-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gophertok-comment-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 2 # 启动三个实例

  comment-mq: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}comment-mq:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启

  # relation服务
  relation-rpc: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}relation-rpc:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
#    ports:
#      - "7080:7080"
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    deploy:
      replicas: 2 # 启动三个实例

  relation-api: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}relation-api:latest
    #    container_name: gophertok-user-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true

    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gophertok-relation-api.rule=Host(`${GOPHERTOKHOST}`) && PathPrefix(`/douyin/relation`)" # 转发规则
      - "traefik.http.routers.gophertok-relation-api.entrypoints=gophertok"
      - "traefik.http.services.gophertok-relation-api.loadbalancer.server.port=7888"    # 实例的端口
      - "traefik.docker.network=gophertok"
      - "traefik.http.services.gophertok-relation-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gophertok-relation-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 2 # 启动三个实例

  relation-mq: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}relation-mq:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启


  # favor服务
  favor-rpc: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}favor-rpc:latest
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
#    ports:
#      - "6080:8080"
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    deploy:
      replicas: 2 # 启动三个实例

  favor-api: # 自定义容器名称
    image: ${DOCKERHUB_IMAGE}favor-api:latest
    #    container_name: gophertok-user-api
    environment: # 设置环境变量
      - TZ=Asia/Shanghai
    privileged: true
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - gophertok
    restart: always                      # 指定容器退出后的重启策略为始终重启
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gophertok-favor-api.rule=Host(`${GOPHERTOKHOST}`) && PathPrefix(`/douyin/favorite`)" # 转发规则
      - "traefik.http.routers.gophertok-favor-api.entrypoints=gophertok"
      - "traefik.http.services.gophertok-favor-api.loadbalancer.server.port=8081"    # 实例的端口
      - "traefik.docker.network=gophertok"
      - "traefik.http.services.gophertok-favor-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.gophertok-favor-api.loadbalancer.passhostheader=true"
    deploy:
      replicas: 2 # 启动三个实例