// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatRpc_MessageAction_FullMethodName   = "/chat.ChatRpc/MessageAction"
	ChatRpc_MessageChat_FullMethodName     = "/chat.ChatRpc/MessageChat"
	ChatRpc_MessageChatLast_FullMethodName = "/chat.ChatRpc/MessageChatLast"
)

// ChatRpcClient is the client API for ChatRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRpcClient interface {
	MessageAction(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*MessageActionResponse, error)
	MessageChat(ctx context.Context, in *MessageChatRequest, opts ...grpc.CallOption) (*MessageChatResponse, error)
	MessageChatLast(ctx context.Context, in *MessageChatLastRequest, opts ...grpc.CallOption) (*MessageChatLastResponse, error)
}

type chatRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRpcClient(cc grpc.ClientConnInterface) ChatRpcClient {
	return &chatRpcClient{cc}
}

func (c *chatRpcClient) MessageAction(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*MessageActionResponse, error) {
	out := new(MessageActionResponse)
	err := c.cc.Invoke(ctx, ChatRpc_MessageAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) MessageChat(ctx context.Context, in *MessageChatRequest, opts ...grpc.CallOption) (*MessageChatResponse, error) {
	out := new(MessageChatResponse)
	err := c.cc.Invoke(ctx, ChatRpc_MessageChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) MessageChatLast(ctx context.Context, in *MessageChatLastRequest, opts ...grpc.CallOption) (*MessageChatLastResponse, error) {
	out := new(MessageChatLastResponse)
	err := c.cc.Invoke(ctx, ChatRpc_MessageChatLast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRpcServer is the server API for ChatRpc service.
// All implementations must embed UnimplementedChatRpcServer
// for forward compatibility
type ChatRpcServer interface {
	MessageAction(context.Context, *MessageActionRequest) (*MessageActionResponse, error)
	MessageChat(context.Context, *MessageChatRequest) (*MessageChatResponse, error)
	MessageChatLast(context.Context, *MessageChatLastRequest) (*MessageChatLastResponse, error)
	mustEmbedUnimplementedChatRpcServer()
}

// UnimplementedChatRpcServer must be embedded to have forward compatible implementations.
type UnimplementedChatRpcServer struct {
}

func (UnimplementedChatRpcServer) MessageAction(context.Context, *MessageActionRequest) (*MessageActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAction not implemented")
}
func (UnimplementedChatRpcServer) MessageChat(context.Context, *MessageChatRequest) (*MessageChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageChat not implemented")
}
func (UnimplementedChatRpcServer) MessageChatLast(context.Context, *MessageChatLastRequest) (*MessageChatLastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageChatLast not implemented")
}
func (UnimplementedChatRpcServer) mustEmbedUnimplementedChatRpcServer() {}

// UnsafeChatRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRpcServer will
// result in compilation errors.
type UnsafeChatRpcServer interface {
	mustEmbedUnimplementedChatRpcServer()
}

func RegisterChatRpcServer(s grpc.ServiceRegistrar, srv ChatRpcServer) {
	s.RegisterService(&ChatRpc_ServiceDesc, srv)
}

func _ChatRpc_MessageAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).MessageAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_MessageAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).MessageAction(ctx, req.(*MessageActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_MessageChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).MessageChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_MessageChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).MessageChat(ctx, req.(*MessageChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_MessageChatLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageChatLastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).MessageChatLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRpc_MessageChatLast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).MessageChatLast(ctx, req.(*MessageChatLastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRpc_ServiceDesc is the grpc.ServiceDesc for ChatRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatRpc",
	HandlerType: (*ChatRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageAction",
			Handler:    _ChatRpc_MessageAction_Handler,
		},
		{
			MethodName: "MessageChat",
			Handler:    _ChatRpc_MessageChat_Handler,
		},
		{
			MethodName: "MessageChatLast",
			Handler:    _ChatRpc_MessageChatLast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
