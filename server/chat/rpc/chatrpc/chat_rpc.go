// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package chatrpc

import (
	"context"

	"GopherTok/server/chat/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LastMessage             = pb.LastMessage
	Message                 = pb.Message
	MessageActionRequest    = pb.MessageActionRequest
	MessageActionResponse   = pb.MessageActionResponse
	MessageChatLastRequest  = pb.MessageChatLastRequest
	MessageChatLastResponse = pb.MessageChatLastResponse
	MessageChatRequest      = pb.MessageChatRequest
	MessageChatResponse     = pb.MessageChatResponse

	ChatRpc interface {
		MessageAction(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*MessageActionResponse, error)
		MessageChat(ctx context.Context, in *MessageChatRequest, opts ...grpc.CallOption) (*MessageChatResponse, error)
		MessageChatLast(ctx context.Context, in *MessageChatLastRequest, opts ...grpc.CallOption) (*MessageChatLastResponse, error)
	}

	defaultChatRpc struct {
		cli zrpc.Client
	}
)

func NewChatRpc(cli zrpc.Client) ChatRpc {
	return &defaultChatRpc{
		cli: cli,
	}
}

func (m *defaultChatRpc) MessageAction(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*MessageActionResponse, error) {
	client := pb.NewChatRpcClient(m.cli.Conn())
	return client.MessageAction(ctx, in, opts...)
}

func (m *defaultChatRpc) MessageChat(ctx context.Context, in *MessageChatRequest, opts ...grpc.CallOption) (*MessageChatResponse, error) {
	client := pb.NewChatRpcClient(m.cli.Conn())
	return client.MessageChat(ctx, in, opts...)
}

func (m *defaultChatRpc) MessageChatLast(ctx context.Context, in *MessageChatLastRequest, opts ...grpc.CallOption) (*MessageChatLastResponse, error) {
	client := pb.NewChatRpcClient(m.cli.Conn())
	return client.MessageChatLast(ctx, in, opts...)
}
