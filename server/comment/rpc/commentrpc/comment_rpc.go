// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentrpc

import (
	"context"

	"GopherTok/server/comment/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCommentRequest       = pb.AddCommentRequest
	AddCommentResponse      = pb.AddCommentResponse
	Comment                 = pb.Comment
	DelCommentRequest       = pb.DelCommentRequest
	DelCommentResponse      = pb.DelCommentResponse
	GetCommentCountRequest  = pb.GetCommentCountRequest
	GetCommentCountResponse = pb.GetCommentCountResponse
	GetCommentListRequest   = pb.GetCommentListRequest
	GetCommentListResponse  = pb.GetCommentListResponse
	User                    = pb.User

	CommentRpc interface {
		AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
		DelComment(ctx context.Context, in *DelCommentRequest, opts ...grpc.CallOption) (*DelCommentResponse, error)
		GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error)
		GetCommentCount(ctx context.Context, in *GetCommentCountRequest, opts ...grpc.CallOption) (*GetCommentCountResponse, error)
	}

	defaultCommentRpc struct {
		cli zrpc.Client
	}
)

func NewCommentRpc(cli zrpc.Client) CommentRpc {
	return &defaultCommentRpc{
		cli: cli,
	}
}

func (m *defaultCommentRpc) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	client := pb.NewCommentRpcClient(m.cli.Conn())
	return client.AddComment(ctx, in, opts...)
}

func (m *defaultCommentRpc) DelComment(ctx context.Context, in *DelCommentRequest, opts ...grpc.CallOption) (*DelCommentResponse, error) {
	client := pb.NewCommentRpcClient(m.cli.Conn())
	return client.DelComment(ctx, in, opts...)
}

func (m *defaultCommentRpc) GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error) {
	client := pb.NewCommentRpcClient(m.cli.Conn())
	return client.GetCommentList(ctx, in, opts...)
}

func (m *defaultCommentRpc) GetCommentCount(ctx context.Context, in *GetCommentCountRequest, opts ...grpc.CallOption) (*GetCommentCountResponse, error) {
	client := pb.NewCommentRpcClient(m.cli.Conn())
	return client.GetCommentCount(ctx, in, opts...)
}
