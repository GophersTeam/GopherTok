// Code generated by goctl. DO NOT EDIT.
// Source: favor.proto

package favorrpc

import (
	"context"

	"GopherTok/server/favor/rpc/types/favor"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DisFavorReq          = favor.DisFavorReq
	DisFavorResp         = favor.DisFavorResp
	FavorListReq         = favor.FavorListReq
	FavorListResp        = favor.FavorListResp
	FavorNumOfUserReq    = favor.FavorNumOfUserReq
	FavorNumOfUserResp   = favor.FavorNumOfUserResp
	FavorNumReq          = favor.FavorNumReq
	FavorNumResp         = favor.FavorNumResp
	FavorReq             = favor.FavorReq
	FavorResp            = favor.FavorResp
	FavoredNumOfUserReq  = favor.FavoredNumOfUserReq
	FavoredNumOfUserResp = favor.FavoredNumOfUserResp
	IsFavorReq           = favor.IsFavorReq
	IsFavorResp          = favor.IsFavorResp
	User                 = favor.User
	Video                = favor.Video

	FavorRpc interface {
		DisFavor(ctx context.Context, in *DisFavorReq, opts ...grpc.CallOption) (*DisFavorResp, error)
		Favor(ctx context.Context, in *FavorReq, opts ...grpc.CallOption) (*FavorResp, error)
		FavorList(ctx context.Context, in *FavorListReq, opts ...grpc.CallOption) (*FavorListResp, error)
		FavorNum(ctx context.Context, in *FavorNumReq, opts ...grpc.CallOption) (*FavorNumResp, error)
		IsFavor(ctx context.Context, in *IsFavorReq, opts ...grpc.CallOption) (*IsFavorResp, error)
		FavorNumOfUser(ctx context.Context, in *FavorNumOfUserReq, opts ...grpc.CallOption) (*FavorNumOfUserResp, error)
		FavoredNumOfUser(ctx context.Context, in *FavoredNumOfUserReq, opts ...grpc.CallOption) (*FavoredNumOfUserResp, error)
	}

	defaultFavorRpc struct {
		cli zrpc.Client
	}
)

func NewFavorRpc(cli zrpc.Client) FavorRpc {
	return &defaultFavorRpc{
		cli: cli,
	}
}

func (m *defaultFavorRpc) DisFavor(ctx context.Context, in *DisFavorReq, opts ...grpc.CallOption) (*DisFavorResp, error) {
	client := favor.NewFavorRpcClient(m.cli.Conn())
	return client.DisFavor(ctx, in, opts...)
}

func (m *defaultFavorRpc) Favor(ctx context.Context, in *FavorReq, opts ...grpc.CallOption) (*FavorResp, error) {
	client := favor.NewFavorRpcClient(m.cli.Conn())
	return client.Favor(ctx, in, opts...)
}

func (m *defaultFavorRpc) FavorList(ctx context.Context, in *FavorListReq, opts ...grpc.CallOption) (*FavorListResp, error) {
	client := favor.NewFavorRpcClient(m.cli.Conn())
	return client.FavorList(ctx, in, opts...)
}

func (m *defaultFavorRpc) FavorNum(ctx context.Context, in *FavorNumReq, opts ...grpc.CallOption) (*FavorNumResp, error) {
	client := favor.NewFavorRpcClient(m.cli.Conn())
	return client.FavorNum(ctx, in, opts...)
}

func (m *defaultFavorRpc) IsFavor(ctx context.Context, in *IsFavorReq, opts ...grpc.CallOption) (*IsFavorResp, error) {
	client := favor.NewFavorRpcClient(m.cli.Conn())
	return client.IsFavor(ctx, in, opts...)
}

func (m *defaultFavorRpc) FavorNumOfUser(ctx context.Context, in *FavorNumOfUserReq, opts ...grpc.CallOption) (*FavorNumOfUserResp, error) {
	client := favor.NewFavorRpcClient(m.cli.Conn())
	return client.FavorNumOfUser(ctx, in, opts...)
}

func (m *defaultFavorRpc) FavoredNumOfUser(ctx context.Context, in *FavoredNumOfUserReq, opts ...grpc.CallOption) (*FavoredNumOfUserResp, error) {
	client := favor.NewFavorRpcClient(m.cli.Conn())
	return client.FavoredNumOfUser(ctx, in, opts...)
}
