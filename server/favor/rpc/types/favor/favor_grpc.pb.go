// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: favor.proto

package favor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FavorRpc_DisFavor_FullMethodName  = "/favor.FavorRpc/DisFavor"
	FavorRpc_Favor_FullMethodName     = "/favor.FavorRpc/Favor"
	FavorRpc_FavorList_FullMethodName = "/favor.FavorRpc/FavorList"
	FavorRpc_FavorNum_FullMethodName  = "/favor.FavorRpc/FavorNum"
)

// FavorRpcClient is the client API for FavorRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavorRpcClient interface {
	DisFavor(ctx context.Context, in *DisFavorReq, opts ...grpc.CallOption) (*DisFavorResp, error)
	Favor(ctx context.Context, in *FavorReq, opts ...grpc.CallOption) (*FavorResp, error)
	FavorList(ctx context.Context, in *FavorListReq, opts ...grpc.CallOption) (*FavorListResp, error)
	FavorNum(ctx context.Context, in *FavorNumReq, opts ...grpc.CallOption) (*FavorNumResp, error)
}

type favorRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFavorRpcClient(cc grpc.ClientConnInterface) FavorRpcClient {
	return &favorRpcClient{cc}
}

func (c *favorRpcClient) DisFavor(ctx context.Context, in *DisFavorReq, opts ...grpc.CallOption) (*DisFavorResp, error) {
	out := new(DisFavorResp)
	err := c.cc.Invoke(ctx, FavorRpc_DisFavor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favorRpcClient) Favor(ctx context.Context, in *FavorReq, opts ...grpc.CallOption) (*FavorResp, error) {
	out := new(FavorResp)
	err := c.cc.Invoke(ctx, FavorRpc_Favor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favorRpcClient) FavorList(ctx context.Context, in *FavorListReq, opts ...grpc.CallOption) (*FavorListResp, error) {
	out := new(FavorListResp)
	err := c.cc.Invoke(ctx, FavorRpc_FavorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favorRpcClient) FavorNum(ctx context.Context, in *FavorNumReq, opts ...grpc.CallOption) (*FavorNumResp, error) {
	out := new(FavorNumResp)
	err := c.cc.Invoke(ctx, FavorRpc_FavorNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavorRpcServer is the server API for FavorRpc service.
// All implementations must embed UnimplementedFavorRpcServer
// for forward compatibility
type FavorRpcServer interface {
	DisFavor(context.Context, *DisFavorReq) (*DisFavorResp, error)
	Favor(context.Context, *FavorReq) (*FavorResp, error)
	FavorList(context.Context, *FavorListReq) (*FavorListResp, error)
	FavorNum(context.Context, *FavorNumReq) (*FavorNumResp, error)
	mustEmbedUnimplementedFavorRpcServer()
}

// UnimplementedFavorRpcServer must be embedded to have forward compatible implementations.
type UnimplementedFavorRpcServer struct {
}

func (UnimplementedFavorRpcServer) DisFavor(context.Context, *DisFavorReq) (*DisFavorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisFavor not implemented")
}
func (UnimplementedFavorRpcServer) Favor(context.Context, *FavorReq) (*FavorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favor not implemented")
}
func (UnimplementedFavorRpcServer) FavorList(context.Context, *FavorListReq) (*FavorListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavorList not implemented")
}
func (UnimplementedFavorRpcServer) FavorNum(context.Context, *FavorNumReq) (*FavorNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavorNum not implemented")
}
func (UnimplementedFavorRpcServer) mustEmbedUnimplementedFavorRpcServer() {}

// UnsafeFavorRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavorRpcServer will
// result in compilation errors.
type UnsafeFavorRpcServer interface {
	mustEmbedUnimplementedFavorRpcServer()
}

func RegisterFavorRpcServer(s grpc.ServiceRegistrar, srv FavorRpcServer) {
	s.RegisterService(&FavorRpc_ServiceDesc, srv)
}

func _FavorRpc_DisFavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisFavorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavorRpcServer).DisFavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavorRpc_DisFavor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavorRpcServer).DisFavor(ctx, req.(*DisFavorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavorRpc_Favor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavorRpcServer).Favor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavorRpc_Favor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavorRpcServer).Favor(ctx, req.(*FavorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavorRpc_FavorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavorRpcServer).FavorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavorRpc_FavorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavorRpcServer).FavorList(ctx, req.(*FavorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavorRpc_FavorNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavorNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavorRpcServer).FavorNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavorRpc_FavorNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavorRpcServer).FavorNum(ctx, req.(*FavorNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FavorRpc_ServiceDesc is the grpc.ServiceDesc for FavorRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavorRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favor.FavorRpc",
	HandlerType: (*FavorRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisFavor",
			Handler:    _FavorRpc_DisFavor_Handler,
		},
		{
			MethodName: "Favor",
			Handler:    _FavorRpc_Favor_Handler,
		},
		{
			MethodName: "FavorList",
			Handler:    _FavorRpc_FavorList_Handler,
		},
		{
			MethodName: "FavorNum",
			Handler:    _FavorRpc_FavorNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favor.proto",
}
