// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamGreeterClient is the client API for StreamGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamGreeterClient interface {
	AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*AddFollowResp, error)
	DeleteFollow(ctx context.Context, in *DeleteFollowReq, opts ...grpc.CallOption) (*DeleteFollowResp, error)
	GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...grpc.CallOption) (*GetFollowListResp, error)
	GetFollowerList(ctx context.Context, in *GetFollowerReq, opts ...grpc.CallOption) (*GetFollowerResp, error)
	GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
}

type streamGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGreeterClient(cc grpc.ClientConnInterface) StreamGreeterClient {
	return &streamGreeterClient{cc}
}

func (c *streamGreeterClient) AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*AddFollowResp, error) {
	out := new(AddFollowResp)
	err := c.cc.Invoke(ctx, "/relation.StreamGreeter/AddFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) DeleteFollow(ctx context.Context, in *DeleteFollowReq, opts ...grpc.CallOption) (*DeleteFollowResp, error) {
	out := new(DeleteFollowResp)
	err := c.cc.Invoke(ctx, "/relation.StreamGreeter/DeleteFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...grpc.CallOption) (*GetFollowListResp, error) {
	out := new(GetFollowListResp)
	err := c.cc.Invoke(ctx, "/relation.StreamGreeter/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetFollowerList(ctx context.Context, in *GetFollowerReq, opts ...grpc.CallOption) (*GetFollowerResp, error) {
	out := new(GetFollowerResp)
	err := c.cc.Invoke(ctx, "/relation.StreamGreeter/GetFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	out := new(GetFriendListResp)
	err := c.cc.Invoke(ctx, "/relation.StreamGreeter/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamGreeterServer is the server API for StreamGreeter service.
// All implementations must embed UnimplementedStreamGreeterServer
// for forward compatibility
type StreamGreeterServer interface {
	AddFollow(context.Context, *AddFollowReq) (*AddFollowResp, error)
	DeleteFollow(context.Context, *DeleteFollowReq) (*DeleteFollowResp, error)
	GetFollowList(context.Context, *GetFollowListReq) (*GetFollowListResp, error)
	GetFollowerList(context.Context, *GetFollowerReq) (*GetFollowerResp, error)
	GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error)
	mustEmbedUnimplementedStreamGreeterServer()
}

// UnimplementedStreamGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamGreeterServer struct {
}

func (*UnimplementedStreamGreeterServer) AddFollow(context.Context, *AddFollowReq) (*AddFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollow not implemented")
}
func (*UnimplementedStreamGreeterServer) DeleteFollow(context.Context, *DeleteFollowReq) (*DeleteFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollow not implemented")
}
func (*UnimplementedStreamGreeterServer) GetFollowList(context.Context, *GetFollowListReq) (*GetFollowListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (*UnimplementedStreamGreeterServer) GetFollowerList(context.Context, *GetFollowerReq) (*GetFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (*UnimplementedStreamGreeterServer) GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (*UnimplementedStreamGreeterServer) mustEmbedUnimplementedStreamGreeterServer() {}

func RegisterStreamGreeterServer(s *grpc.Server, srv StreamGreeterServer) {
	s.RegisterService(&_StreamGreeter_serviceDesc, srv)
}

func _StreamGreeter_AddFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).AddFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.StreamGreeter/AddFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).AddFollow(ctx, req.(*AddFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_DeleteFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).DeleteFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.StreamGreeter/DeleteFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).DeleteFollow(ctx, req.(*DeleteFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.StreamGreeter/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetFollowList(ctx, req.(*GetFollowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.StreamGreeter/GetFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetFollowerList(ctx, req.(*GetFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.StreamGreeter/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).GetFriendList(ctx, req.(*GetFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relation.StreamGreeter",
	HandlerType: (*StreamGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFollow",
			Handler:    _StreamGreeter_AddFollow_Handler,
		},
		{
			MethodName: "DeleteFollow",
			Handler:    _StreamGreeter_DeleteFollow_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _StreamGreeter_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _StreamGreeter_GetFollowerList_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _StreamGreeter_GetFriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
