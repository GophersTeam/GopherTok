// Code generated by goctl. DO NOT EDIT.
// Source: relation.proto

package relationrpc

import (
	"context"

	"GopherTok/server/relation/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddFollowReq         = pb.AddFollowReq
	AddFollowResp        = pb.AddFollowResp
	CheckIsFollowReq     = pb.CheckIsFollowReq
	CheckIsFollowResp    = pb.CheckIsFollowResp
	DeleteFollowReq      = pb.DeleteFollowReq
	DeleteFollowResp     = pb.DeleteFollowResp
	FollowSubject        = pb.FollowSubject
	FriendUser           = pb.FriendUser
	GetFollowCountReq    = pb.GetFollowCountReq
	GetFollowCountResp   = pb.GetFollowCountResp
	GetFollowListReq     = pb.GetFollowListReq
	GetFollowListResp    = pb.GetFollowListResp
	GetFollowerCountReq  = pb.GetFollowerCountReq
	GetFollowerCountResp = pb.GetFollowerCountResp
	GetFollowerReq       = pb.GetFollowerReq
	GetFollowerResp      = pb.GetFollowerResp
	GetFriendCountReq    = pb.GetFriendCountReq
	GetFriendCountResp   = pb.GetFriendCountResp
	GetFriendListReq     = pb.GetFriendListReq
	GetFriendListResp    = pb.GetFriendListResp
	User                 = pb.User

	RelationRpc interface {
		AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*AddFollowResp, error)
		DeleteFollow(ctx context.Context, in *DeleteFollowReq, opts ...grpc.CallOption) (*DeleteFollowResp, error)
		GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...grpc.CallOption) (*GetFollowListResp, error)
		GetFollowerList(ctx context.Context, in *GetFollowerReq, opts ...grpc.CallOption) (*GetFollowerResp, error)
		GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
		GetFollowerCount(ctx context.Context, in *GetFollowerCountReq, opts ...grpc.CallOption) (*GetFollowerCountResp, error)
		GetFollowCount(ctx context.Context, in *GetFollowCountReq, opts ...grpc.CallOption) (*GetFollowCountResp, error)
		GetFriendCount(ctx context.Context, in *GetFriendCountReq, opts ...grpc.CallOption) (*GetFriendCountResp, error)
		CheckIsFollow(ctx context.Context, in *CheckIsFollowReq, opts ...grpc.CallOption) (*CheckIsFollowResp, error)
	}

	defaultRelationRpc struct {
		cli zrpc.Client
	}
)

func NewRelationRpc(cli zrpc.Client) RelationRpc {
	return &defaultRelationRpc{
		cli: cli,
	}
}

func (m *defaultRelationRpc) AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*AddFollowResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.AddFollow(ctx, in, opts...)
}

func (m *defaultRelationRpc) DeleteFollow(ctx context.Context, in *DeleteFollowReq, opts ...grpc.CallOption) (*DeleteFollowResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.DeleteFollow(ctx, in, opts...)
}

func (m *defaultRelationRpc) GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...grpc.CallOption) (*GetFollowListResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.GetFollowList(ctx, in, opts...)
}

func (m *defaultRelationRpc) GetFollowerList(ctx context.Context, in *GetFollowerReq, opts ...grpc.CallOption) (*GetFollowerResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.GetFollowerList(ctx, in, opts...)
}

func (m *defaultRelationRpc) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.GetFriendList(ctx, in, opts...)
}

func (m *defaultRelationRpc) GetFollowerCount(ctx context.Context, in *GetFollowerCountReq, opts ...grpc.CallOption) (*GetFollowerCountResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.GetFollowerCount(ctx, in, opts...)
}

func (m *defaultRelationRpc) GetFollowCount(ctx context.Context, in *GetFollowCountReq, opts ...grpc.CallOption) (*GetFollowCountResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.GetFollowCount(ctx, in, opts...)
}

func (m *defaultRelationRpc) GetFriendCount(ctx context.Context, in *GetFriendCountReq, opts ...grpc.CallOption) (*GetFriendCountResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.GetFriendCount(ctx, in, opts...)
}

func (m *defaultRelationRpc) CheckIsFollow(ctx context.Context, in *CheckIsFollowReq, opts ...grpc.CallOption) (*CheckIsFollowResp, error) {
	client := pb.NewRelationRpcClient(m.cli.Conn())
	return client.CheckIsFollow(ctx, in, opts...)
}
