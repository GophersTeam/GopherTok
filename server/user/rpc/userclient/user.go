// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"GopherTok/server/user/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCountReq      = user.AddCountReq
	AddCountResp     = user.AddCountResp
	CommonResp       = user.CommonResp
	LoginReq         = user.LoginReq
	LoginResp        = user.LoginResp
	RegisterReq      = user.RegisterReq
	RegisterResp     = user.RegisterResp
	UserInfoReq      = user.UserInfoReq
	UserInfoResp     = user.UserInfoResp
	UserIsExistsReq  = user.UserIsExistsReq
	UserIsExistsResp = user.UserIsExistsResp

	User interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		AddCount(ctx context.Context, in *AddCountReq, opts ...grpc.CallOption) (*AddCountResp, error)
		UserIsExists(ctx context.Context, in *UserIsExistsReq, opts ...grpc.CallOption) (*UserIsExistsResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUser) AddCount(ctx context.Context, in *AddCountReq, opts ...grpc.CallOption) (*AddCountResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AddCount(ctx, in, opts...)
}

func (m *defaultUser) UserIsExists(ctx context.Context, in *UserIsExistsReq, opts ...grpc.CallOption) (*UserIsExistsResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserIsExists(ctx, in, opts...)
}
